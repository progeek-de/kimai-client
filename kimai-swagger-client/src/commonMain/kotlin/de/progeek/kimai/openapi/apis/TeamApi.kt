/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.progeek.kimai.openapi.apis

import de.progeek.kimai.openapi.models.Team
import de.progeek.kimai.openapi.models.TeamCollection
import de.progeek.kimai.openapi.models.TeamEditForm

import de.progeek.kimai.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class TeamApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Delete a team
     * 
     * @param id Team ID to delete
     * @return void
     */
    open suspend fun deleteDeleteTeam(id: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/teams/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revokes access for an activity from a team
     * 
     * @param id The team whose permission will be revoked
     * @param activityId The activity to remove (Activity ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteDeleteTeamActivity(id: kotlin.String, activityId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/teams/{id}/activities/{activityId}".replace("{" + "id" + "}", "$id").replace("{" + "activityId" + "}", "$activityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revokes access for a customer from a team
     * 
     * @param id The team whose permission will be revoked
     * @param customerId The customer to remove (Customer ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteDeleteTeamCustomer(id: kotlin.String, customerId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/teams/{id}/customers/{customerId}".replace("{" + "id" + "}", "$id").replace("{" + "customerId" + "}", "$customerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Removes a member from the team
     * 
     * @param id The team from which the member will be removed
     * @param userId The team member to remove (User ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteDeleteTeamMember(id: kotlin.String, userId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/teams/{id}/members/{userId}".replace("{" + "id" + "}", "$id").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revokes access for a project from a team
     * 
     * @param id The team whose permission will be revoked
     * @param projectId The project to remove (Project ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteDeleteTeamProject(id: kotlin.String, projectId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/teams/{id}/projects/{projectId}".replace("{" + "id" + "}", "$id").replace("{" + "projectId" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns one team
     * 
     * @param id 
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetTeam(id: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/teams/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Fetch all existing teams (which are visible to the user)
     * 
     * @return kotlin.collections.List<TeamCollection>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetTeams(): HttpResponse<kotlin.collections.List<TeamCollection>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/teams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGetTeamsResponse>().map { value }
    }

    @Serializable
    private class GetGetTeamsResponse(val value: List<TeamCollection>) {
        @Serializer(GetGetTeamsResponse::class)
        companion object : KSerializer<GetGetTeamsResponse> {
            private val serializer: KSerializer<List<TeamCollection>> = serializer<List<TeamCollection>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGetTeamsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGetTeamsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Update an existing team
     * Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)
     * @param id Team ID to update
     * @param teamEditForm 
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchPatchTeam(id: kotlin.String, teamEditForm: TeamEditForm): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = teamEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/teams/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Creates a new team
     * Creates a new team and returns it afterwards
     * @param teamEditForm 
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostTeam(teamEditForm: TeamEditForm): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = teamEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/teams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Grant the team access to an activity
     * 
     * @param id The team that is granted access
     * @param activityId The activity to grant acecess to (Activity ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostTeamActivity(id: kotlin.String, activityId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/teams/{id}/activities/{activityId}".replace("{" + "id" + "}", "$id").replace("{" + "activityId" + "}", "$activityId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Grant the team access to a customer
     * 
     * @param id The team that is granted access
     * @param customerId The customer to grant acecess to (Customer ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostTeamCustomer(id: kotlin.String, customerId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/teams/{id}/customers/{customerId}".replace("{" + "id" + "}", "$id").replace("{" + "customerId" + "}", "$customerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add a new member to a team
     * 
     * @param id The team which will receive the new member
     * @param userId The team member to add (User ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostTeamMember(id: kotlin.String, userId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/teams/{id}/members/{userId}".replace("{" + "id" + "}", "$id").replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Grant the team access to a project
     * 
     * @param id The team that is granted access
     * @param projectId The project to grant acecess to (Project ID)
     * @return Team
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostTeamProject(id: kotlin.String, projectId: kotlin.String): HttpResponse<Team> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/teams/{id}/projects/{projectId}".replace("{" + "id" + "}", "$id").replace("{" + "projectId" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
