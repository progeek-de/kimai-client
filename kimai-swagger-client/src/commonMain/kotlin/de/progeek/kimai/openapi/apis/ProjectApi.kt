/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.progeek.kimai.openapi.apis

import de.progeek.kimai.openapi.models.PatchAppApiActivityMetaRequest
import de.progeek.kimai.openapi.models.ProjectCollection
import de.progeek.kimai.openapi.models.ProjectEditForm
import de.progeek.kimai.openapi.models.ProjectEntity
import de.progeek.kimai.openapi.models.ProjectRate
import de.progeek.kimai.openapi.models.ProjectRateForm

import de.progeek.kimai.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ProjectApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Deletes one rate for a project
     * 
     * @param id The project whose rate will be removed
     * @param rateId The rate to remove
     * @return void
     */
    open suspend fun deleteDeleteProjectRate(id: kotlin.String, rateId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/projects/{id}/rates/{rateId}".replace("{" + "id" + "}", "$id").replace("{" + "rateId" + "}", "$rateId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns one project
     * 
     * @param id 
     * @return ProjectEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetProject(id: kotlin.String): HttpResponse<ProjectEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/projects/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns a collection of all rates for one project
     * 
     * @param id The project whose rates will be returned
     * @return kotlin.collections.List<ProjectRate>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetProjectRates(id: kotlin.String): HttpResponse<kotlin.collections.List<ProjectRate>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/projects/{id}/rates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGetProjectRatesResponse>().map { value }
    }

    @Serializable
    private class GetGetProjectRatesResponse(val value: List<ProjectRate>) {
        @Serializer(GetGetProjectRatesResponse::class)
        companion object : KSerializer<GetGetProjectRatesResponse> {
            private val serializer: KSerializer<List<ProjectRate>> = serializer<List<ProjectRate>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGetProjectRatesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGetProjectRatesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Returns a collection of projects (which are visible to the user)
     * 
     * @param customer Customer ID to filter projects (optional)
     * @param customers List of customer IDs to filter, e.g.: customers[]&#x3D;1&amp;customers[]&#x3D;2 (optional, default to arrayListOf())
     * @param visible Visibility status to filter projects: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both (optional, default to "1")
     * @param start Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty) (optional)
     * @param end Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty) (optional)
     * @param ignoreDates If set, start and end are completely ignored. Allowed values: 1 (default: off) (optional)
     * @param globalActivities If given, filters projects by their &#39;global activity&#39; support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all) (optional)
     * @param order The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param orderBy The field by which results will be ordered. Allowed values: id, name, customer (default: name) (optional)
     * @param term Free search term (optional)
     * @return kotlin.collections.List<ProjectCollection>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetProjects(customer: kotlin.String? = null, customers: kotlin.collections.List<kotlin.Any>? = arrayListOf(), visible: kotlin.String? = "1", start: kotlin.String? = null, end: kotlin.String? = null, ignoreDates: kotlin.String? = null, globalActivities: kotlin.String? = null, order: kotlin.String? = null, orderBy: kotlin.String? = null, term: kotlin.String? = null): HttpResponse<kotlin.collections.List<ProjectCollection>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        customer?.apply { localVariableQuery["customer"] = listOf("$customer") }
        customers?.apply { localVariableQuery["customers[]"] = toMultiValue(this, "multi") }
        visible?.apply { localVariableQuery["visible"] = listOf("$visible") }
        start?.apply { localVariableQuery["start"] = listOf("$start") }
        end?.apply { localVariableQuery["end"] = listOf("$end") }
        ignoreDates?.apply { localVariableQuery["ignoreDates"] = listOf("$ignoreDates") }
        globalActivities?.apply { localVariableQuery["globalActivities"] = listOf("$globalActivities") }
        order?.apply { localVariableQuery["order"] = listOf("$order") }
        orderBy?.apply { localVariableQuery["orderBy"] = listOf("$orderBy") }
        term?.apply { localVariableQuery["term"] = listOf("$term") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGetProjectsResponse>().map { value }
    }

    @Serializable
    private class GetGetProjectsResponse(val value: List<ProjectCollection>) {
        @Serializer(GetGetProjectsResponse::class)
        companion object : KSerializer<GetGetProjectsResponse> {
            private val serializer: KSerializer<List<ProjectCollection>> = serializer<List<ProjectCollection>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGetProjectsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGetProjectsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Sets the value of a meta-field for an existing project
     * 
     * @param id Project record ID to set the meta-field value for
     * @param patchAppApiActivityMetaRequest  (optional)
     * @return ProjectEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchAppApiProjectMeta(id: kotlin.String, patchAppApiActivityMetaRequest: PatchAppApiActivityMetaRequest? = null): HttpResponse<ProjectEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = patchAppApiActivityMetaRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/projects/{id}/meta".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update an existing project
     * Update an existing project, you can pass all or just a subset of all attributes
     * @param id Project ID to update
     * @param projectEditForm 
     * @return ProjectEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchPatchProject(id: kotlin.String, projectEditForm: ProjectEditForm): HttpResponse<ProjectEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = projectEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/projects/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Creates a new project
     * Creates a new project and returns it afterwards
     * @param projectEditForm 
     * @return ProjectEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostProject(projectEditForm: ProjectEditForm): HttpResponse<ProjectEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = projectEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Adds a new rate to a project
     * 
     * @param id The project to add the rate for
     * @param projectRateForm 
     * @return ProjectRate
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostProjectRate(id: kotlin.String, projectRateForm: ProjectRateForm): HttpResponse<ProjectRate> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = projectRateForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/projects/{id}/rates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
