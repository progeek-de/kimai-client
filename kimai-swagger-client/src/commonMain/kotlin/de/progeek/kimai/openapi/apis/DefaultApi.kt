/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.progeek.kimai.openapi.apis

import de.progeek.kimai.openapi.models.Plugin
import de.progeek.kimai.openapi.models.TimesheetConfig
import de.progeek.kimai.openapi.models.Version

import de.progeek.kimai.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class DefaultApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Returns the timesheet configuration
     * 
     * @return TimesheetConfig
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAppApiConfigurationTimesheetconfig(): HttpResponse<TimesheetConfig> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/config/timesheet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * A testing route for the API
     * 
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAppApiStatusPing(): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/ping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns information about installed Plugins
     * 
     * @return kotlin.collections.List<Plugin>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAppApiStatusPlugin(): HttpResponse<kotlin.collections.List<Plugin>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/plugins",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetAppApiStatusPluginResponse>().map { value }
    }

    @Serializable
    private class GetAppApiStatusPluginResponse(val value: List<Plugin>) {
        @Serializer(GetAppApiStatusPluginResponse::class)
        companion object : KSerializer<GetAppApiStatusPluginResponse> {
            private val serializer: KSerializer<List<Plugin>> = serializer<List<Plugin>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetAppApiStatusPluginResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetAppApiStatusPluginResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Returns information about the Kimai release
     * 
     * @return Version
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAppApiStatusVersion(): HttpResponse<Version> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/version",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
