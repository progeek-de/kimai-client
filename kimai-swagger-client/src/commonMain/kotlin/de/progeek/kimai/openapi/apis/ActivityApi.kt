/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.progeek.kimai.openapi.apis

import de.progeek.kimai.openapi.models.ActivityCollection
import de.progeek.kimai.openapi.models.ActivityEditForm
import de.progeek.kimai.openapi.models.ActivityEntity
import de.progeek.kimai.openapi.models.ActivityRate
import de.progeek.kimai.openapi.models.ActivityRateForm
import de.progeek.kimai.openapi.models.PatchAppApiActivityMetaRequest

import de.progeek.kimai.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ActivityApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Deletes one rate for an activity
     * 
     * @param id The activity whose rate will be removed
     * @param rateId The rate to remove
     * @return void
     */
    open suspend fun deleteDeleteActivityRate(id: kotlin.String, rateId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/activities/{id}/rates/{rateId}".replace("{" + "id" + "}", "$id").replace("{" + "rateId" + "}", "$rateId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns a collection of activities (which are visible to the user)
     * 
     * @param project Project ID to filter activities (optional)
     * @param projects List of project IDs to filter activities, e.g.: projects[]&#x3D;1&amp;projects[]&#x3D;2 (optional, default to arrayListOf())
     * @param visible Visibility status to filter activities: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (optional, default to "1")
     * @param globals Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param orderBy The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param order The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param term Free search term (optional)
     * @return kotlin.collections.List<ActivityCollection>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetActivities(project: kotlin.String? = null, projects: kotlin.collections.List<kotlin.Any>? = arrayListOf(), visible: kotlin.String? = "1", globals: kotlin.String? = null, orderBy: kotlin.String? = null, order: kotlin.String? = null, term: kotlin.String? = null): HttpResponse<kotlin.collections.List<ActivityCollection>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        project?.apply { localVariableQuery["project"] = listOf("$project") }
        projects?.apply { localVariableQuery["projects[]"] = toMultiValue(this, "multi") }
        visible?.apply { localVariableQuery["visible"] = listOf("$visible") }
        globals?.apply { localVariableQuery["globals"] = listOf("$globals") }
        orderBy?.apply { localVariableQuery["orderBy"] = listOf("$orderBy") }
        order?.apply { localVariableQuery["order"] = listOf("$order") }
        term?.apply { localVariableQuery["term"] = listOf("$term") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/activities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGetActivitiesResponse>().map { value }
    }

    @Serializable
    private class GetGetActivitiesResponse(val value: List<ActivityCollection>) {
        @Serializer(GetGetActivitiesResponse::class)
        companion object : KSerializer<GetGetActivitiesResponse> {
            private val serializer: KSerializer<List<ActivityCollection>> = serializer<List<ActivityCollection>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGetActivitiesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGetActivitiesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Returns one activity
     * 
     * @param id Activity ID to fetch
     * @return ActivityEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetActivity(id: kotlin.String): HttpResponse<ActivityEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/activities/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Returns a collection of all rates for one activity
     * 
     * @param id The activity whose rates will be returned
     * @return kotlin.collections.List<ActivityRate>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getGetActivityRates(id: kotlin.String): HttpResponse<kotlin.collections.List<ActivityRate>> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/activities/{id}/rates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetGetActivityRatesResponse>().map { value }
    }

    @Serializable
    private class GetGetActivityRatesResponse(val value: List<ActivityRate>) {
        @Serializer(GetGetActivityRatesResponse::class)
        companion object : KSerializer<GetGetActivityRatesResponse> {
            private val serializer: KSerializer<List<ActivityRate>> = serializer<List<ActivityRate>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetGetActivityRatesResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetGetActivityRatesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Sets the value of a meta-field for an existing activity
     * 
     * @param id Activity record ID to set the meta-field value for
     * @param patchAppApiActivityMetaRequest  (optional)
     * @return ActivityEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchAppApiActivityMeta(id: kotlin.String, patchAppApiActivityMetaRequest: PatchAppApiActivityMetaRequest? = null): HttpResponse<ActivityEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = patchAppApiActivityMetaRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/activities/{id}/meta".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update an existing activity
     * Update an existing activity, you can pass all or just a subset of all attributes
     * @param id Activity ID to update
     * @param activityEditForm 
     * @return ActivityEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchPatchActivity(id: kotlin.String, activityEditForm: ActivityEditForm): HttpResponse<ActivityEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = activityEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/activities/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Creates a new activity
     * Creates a new activity and returns it afterwards
     * @param activityEditForm 
     * @return ActivityEntity
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostActivity(activityEditForm: ActivityEditForm): HttpResponse<ActivityEntity> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = activityEditForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/activities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Adds a new rate to an activity
     * 
     * @param id The activity to add the rate for
     * @param activityRateForm 
     * @return ActivityRate
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postPostActivityRate(id: kotlin.String, activityRateForm: ActivityRateForm): HttpResponse<ActivityRate> {

        val localVariableAuthNames = listOf<String>("apiToken", "apiUser")

        val localVariableBody = activityRateForm

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/activities/{id}/rates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
